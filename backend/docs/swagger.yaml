basePath: /api/v1
definitions:
  models.CreateResultDto:
    properties:
      matchEndDate:
        example: "2025-06-01T00:40:00Z"
        type: string
      matchStartDate:
        example: "2025-06-01T00:00:00Z"
        type: string
      opponentScore:
        example: "14"
        type: string
      opponentTeamId:
        example: 4
        type: integer
      score:
        example: "16"
        type: string
    required:
    - matchEndDate
    - matchStartDate
    - opponentTeamId
    type: object
  models.CreateSeasonDto:
    properties:
      endDate:
        example: "2025-08-31T00:00:00Z"
        type: string
      name:
        example: Summer 2025
        maxLength: 100
        minLength: 3
        type: string
      startDate:
        example: "2025-06-01T00:00:00Z"
        type: string
    required:
    - endDate
    - name
    - startDate
    type: object
  models.CreateTeamDto:
    properties:
      name:
        example: BIG Clan
        maxLength: 100
        minLength: 3
        type: string
    required:
    - name
    type: object
  models.ErrorDto:
    properties:
      error:
        example: Error message
        type: string
    type: object
  models.LoginDto:
    properties:
      email:
        example: email@example.com
        type: string
      password:
        example: VeryStrongPassword
        type: string
    required:
    - email
    - password
    type: object
  models.ResultDto:
    properties:
      id:
        example: 7
        type: integer
      matchEndDate:
        example: "2025-06-01T00:40:00Z"
        type: string
      matchStartDate:
        example: "2025-06-01T00:00:00Z"
        type: string
      opponentScore:
        example: "14"
        type: string
      opponentTeamId:
        example: 7
        type: integer
      score:
        example: "16"
        type: string
      seasonId:
        example: 5
        type: integer
      teamId:
        example: 6
        type: integer
      userUuid:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
    type: object
  models.Role:
    enum:
    - admin
    - moderator
    - user
    type: string
    x-enum-varnames:
    - AdminRole
    - ModeratorRole
    - UserRole
  models.SeasonDto:
    properties:
      endDate:
        example: "2025-08-31T00:00:00Z"
        type: string
      id:
        example: 5
        type: integer
      name:
        example: Summer 2025
        type: string
      startDate:
        example: "2025-06-01T00:00:00Z"
        type: string
      userUuid:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
    type: object
  models.SignUpDto:
    properties:
      email:
        example: email@example.com
        type: string
      password:
        example: VeryStrongPassword
        maxLength: 255
        minLength: 8
        type: string
      username:
        example: john_doe_123
        maxLength: 100
        minLength: 3
        type: string
    required:
    - email
    - password
    - username
    type: object
  models.TeamDto:
    properties:
      elo:
        example: 1200
        type: integer
      id:
        example: 6
        type: integer
      name:
        example: BIG Clan
        type: string
      seasonId:
        example: 5
        type: integer
      userUuid:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
    type: object
  models.UpdateResultDto:
    properties:
      matchEndDate:
        example: "2025-06-01T00:40:00Z"
        type: string
      matchStartDate:
        example: "2025-06-01T00:00:00Z"
        type: string
      opponentScore:
        example: "14"
        type: string
      score:
        example: "16"
        type: string
    required:
    - matchEndDate
    - matchStartDate
    type: object
  models.UpdateSeasonDto:
    properties:
      endDate:
        example: "2025-08-31T00:00:00Z"
        type: string
      name:
        example: Summer 2025
        maxLength: 100
        minLength: 3
        type: string
      startDate:
        example: "2025-06-01T00:00:00Z"
        type: string
    required:
    - endDate
    - name
    - startDate
    type: object
  models.UpdateTeamDto:
    properties:
      name:
        example: BIG Clan
        maxLength: 100
        minLength: 3
        type: string
    required:
    - name
    type: object
  models.UserDto:
    properties:
      email:
        example: email@example.com
        type: string
      id:
        example: 526432ea-822b-4b5b-b1b3-34e8ab453e03
        type: string
      role:
        allOf:
        - $ref: '#/definitions/models.Role'
        example: admin
      username:
        example: john_doe_123
        type: string
    type: object
externalDocs:
  description: OpenAPI
  url: https://swagger.io/resources/open-api/
host: localhost:8080
info:
  contact:
    name: AurisTFG
    url: https://github.com/AurisTFG
  description: Documentation for MatchMania API
  title: MatchMania API
  version: 0.1.0
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Log in
      parameters:
      - description: Log in details
        in: body
        name: loginDto
        required: true
        schema:
          $ref: '#/definitions/models.LoginDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserDto'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorDto'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/models.ErrorDto'
      summary: Log in
      tags:
      - auth
  /auth/logout:
    post:
      description: Log out
      responses:
        "204":
          description: No Content
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/models.ErrorDto'
      summary: Log out
      tags:
      - auth
  /auth/me:
    get:
      description: Get current user
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserDto'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/models.ErrorDto'
      summary: Get current user
      tags:
      - auth
  /auth/refresh:
    post:
      description: Refresh token
      responses:
        "204":
          description: No Content
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/models.ErrorDto'
      summary: Refresh token
      tags:
      - auth
  /auth/signup:
    post:
      consumes:
      - application/json
      description: Sign up
      parameters:
      - description: Sign up details
        in: body
        name: signUpDto
        required: true
        schema:
          $ref: '#/definitions/models.SignUpDto'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.UserDto'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorDto'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/models.ErrorDto'
      summary: Sign up
      tags:
      - auth
  /seasons:
    get:
      consumes:
      - application/json
      description: Get all seasons
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.SeasonDto'
            type: array
      summary: Get all seasons
      tags:
      - seasons
    post:
      consumes:
      - application/json
      description: Create a season
      parameters:
      - description: Season object that needs to be created
        in: body
        name: season
        required: true
        schema:
          $ref: '#/definitions/models.CreateSeasonDto'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.SeasonDto'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorDto'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorDto'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/models.ErrorDto'
      summary: Create a season
      tags:
      - seasons
  /seasons/{seasonId}:
    delete:
      consumes:
      - application/json
      description: Delete a season
      parameters:
      - default: "1"
        description: Season ID
        in: path
        name: seasonId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorDto'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorDto'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.ErrorDto'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorDto'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/models.ErrorDto'
      summary: Delete a season
      tags:
      - seasons
    get:
      consumes:
      - application/json
      description: Get a season
      parameters:
      - default: "2"
        description: Season ID
        in: path
        name: seasonId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SeasonDto'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorDto'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorDto'
      summary: Get a season
      tags:
      - seasons
    patch:
      consumes:
      - application/json
      description: Update a season
      parameters:
      - default: "1"
        description: Season ID
        in: path
        name: seasonId
        required: true
        type: string
      - description: Season object that needs to be updated
        in: body
        name: season
        required: true
        schema:
          $ref: '#/definitions/models.UpdateSeasonDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SeasonDto'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorDto'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorDto'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.ErrorDto'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorDto'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/models.ErrorDto'
      summary: Update a season
      tags:
      - seasons
  /seasons/{seasonId}/teams:
    get:
      consumes:
      - application/json
      description: Get all teams
      parameters:
      - default: "1"
        description: Season ID
        in: path
        name: seasonId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.TeamDto'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorDto'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/models.ErrorDto'
      summary: Get all teams
      tags:
      - teams
    post:
      consumes:
      - application/json
      description: Create a team
      parameters:
      - default: "1"
        description: Season ID
        in: path
        name: seasonId
        required: true
        type: string
      - description: Team object that needs to be created
        in: body
        name: team
        required: true
        schema:
          $ref: '#/definitions/models.CreateTeamDto'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.TeamDto'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorDto'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorDto'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorDto'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/models.ErrorDto'
      summary: Create a team
      tags:
      - teams
  /seasons/{seasonId}/teams/{teamId}:
    delete:
      consumes:
      - application/json
      description: Delete a team
      parameters:
      - default: "1"
        description: Season ID
        in: path
        name: seasonId
        required: true
        type: string
      - default: "1"
        description: Team ID
        in: path
        name: teamId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorDto'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorDto'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.ErrorDto'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorDto'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/models.ErrorDto'
      summary: Delete a team
      tags:
      - teams
    get:
      consumes:
      - application/json
      description: Get a team
      parameters:
      - default: "1"
        description: Season ID
        in: path
        name: seasonId
        required: true
        type: string
      - default: "1"
        description: Team ID
        in: path
        name: teamId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.TeamDto'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorDto'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorDto'
      summary: Get a team
      tags:
      - teams
    patch:
      consumes:
      - application/json
      description: Update a team
      parameters:
      - default: "1"
        description: Season ID
        in: path
        name: seasonId
        required: true
        type: string
      - default: "1"
        description: Team ID
        in: path
        name: teamId
        required: true
        type: string
      - description: Team object that needs to be updated
        in: body
        name: team
        required: true
        schema:
          $ref: '#/definitions/models.UpdateTeamDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.TeamDto'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorDto'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorDto'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.ErrorDto'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorDto'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/models.ErrorDto'
      summary: Update a team
      tags:
      - teams
  /seasons/{seasonId}/teams/{teamId}/results:
    get:
      consumes:
      - application/json
      description: Get all results
      parameters:
      - default: "1"
        description: Season ID
        in: path
        name: seasonId
        required: true
        type: string
      - default: "1"
        description: Team ID
        in: path
        name: teamId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.ResultDto'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorDto'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/models.ErrorDto'
      summary: Get all results
      tags:
      - results
    post:
      consumes:
      - application/json
      description: Create a result
      parameters:
      - default: "1"
        description: Season ID
        in: path
        name: seasonId
        required: true
        type: string
      - default: "1"
        description: Team ID
        in: path
        name: teamId
        required: true
        type: string
      - description: Result object that needs to be created
        in: body
        name: result
        required: true
        schema:
          $ref: '#/definitions/models.CreateResultDto'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.ResultDto'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorDto'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorDto'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorDto'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/models.ErrorDto'
      summary: Create a result
      tags:
      - results
  /seasons/{seasonId}/teams/{teamId}/results/{resultId}:
    delete:
      consumes:
      - application/json
      description: Delete a result
      parameters:
      - default: "1"
        description: Season ID
        in: path
        name: seasonId
        required: true
        type: string
      - default: "1"
        description: Team ID
        in: path
        name: teamId
        required: true
        type: string
      - default: "1"
        description: Result ID
        in: path
        name: resultId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorDto'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorDto'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.ErrorDto'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorDto'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/models.ErrorDto'
      summary: Delete a result
      tags:
      - results
    get:
      consumes:
      - application/json
      description: Get a result
      parameters:
      - default: "1"
        description: Season ID
        in: path
        name: seasonId
        required: true
        type: string
      - default: "1"
        description: Team ID
        in: path
        name: teamId
        required: true
        type: string
      - default: "1"
        description: Result ID
        in: path
        name: resultId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.ResultDto'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorDto'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorDto'
      summary: Get a result
      tags:
      - results
    patch:
      consumes:
      - application/json
      description: Update a result
      parameters:
      - default: "1"
        description: Season ID
        in: path
        name: seasonId
        required: true
        type: string
      - default: "1"
        description: Team ID
        in: path
        name: teamId
        required: true
        type: string
      - default: "1"
        description: Result ID
        in: path
        name: resultId
        required: true
        type: string
      - description: Result object that needs to be updated
        in: body
        name: result
        required: true
        schema:
          $ref: '#/definitions/models.UpdateResultDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResultDto'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorDto'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorDto'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.ErrorDto'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorDto'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/models.ErrorDto'
      summary: Update a result
      tags:
      - results
  /users:
    get:
      consumes:
      - application/json
      description: Get all users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.UserDto'
            type: array
      summary: Get all users
      tags:
      - users
  /users/{id}:
    get:
      consumes:
      - application/json
      description: Get user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserDto'
      summary: Get user by ID
      tags:
      - users
schemes:
- http
swagger: "2.0"
