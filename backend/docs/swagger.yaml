basePath: /api/v1
definitions:
  models.CreateResultDto:
    properties:
      matchEndDate:
        example: "2025-06-01T00:40:00Z"
        type: string
      matchStartDate:
        example: "2025-06-01T00:00:00Z"
        type: string
      opponentScore:
        example: "14"
        type: string
      opponentTeamId:
        example: 7
        type: integer
      score:
        example: "16"
        type: string
    required:
    - matchEndDate
    - matchStartDate
    - opponentTeamId
    type: object
  models.CreateSeasonDto:
    properties:
      endDate:
        example: "2025-08-31T00:00:00Z"
        type: string
      name:
        example: Summer 2025
        maxLength: 100
        minLength: 3
        type: string
      startDate:
        example: "2025-06-01T00:00:00Z"
        type: string
    required:
    - endDate
    - name
    - startDate
    type: object
  models.CreateTeamDto:
    properties:
      name:
        example: BIG Clan
        maxLength: 100
        minLength: 3
        type: string
    required:
    - name
    type: object
  models.LoginDto:
    properties:
      email:
        example: email@gmail.com
        type: string
      password:
        example: VeryStrongPassword
        maxLength: 255
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  models.ResultDto:
    properties:
      id:
        example: 7
        type: integer
      matchEndDate:
        example: "2025-06-01T00:40:00Z"
        type: string
      matchStartDate:
        example: "2025-06-01T00:00:00Z"
        type: string
      opponentScore:
        example: "14"
        type: string
      opponentTeam:
        example: 7
        type: integer
      score:
        example: "16"
        type: string
      team:
        example: 6
        type: integer
    type: object
  models.Role:
    enum:
    - admin
    - moderator
    - user
    type: string
    x-enum-varnames:
    - AdminRole
    - ModeratorRole
    - UserRole
  models.SeasonDto:
    properties:
      endDate:
        example: "2025-08-31T00:00:00Z"
        type: string
      id:
        example: 5
        type: integer
      name:
        example: Summer 2025
        type: string
      startDate:
        example: "2025-06-01T00:00:00Z"
        type: string
    type: object
  models.SignUpDto:
    properties:
      email:
        example: email@gmail.com
        type: string
      password:
        example: VeryStrongPassword
        maxLength: 255
        minLength: 8
        type: string
      username:
        example: AurisTFG
        maxLength: 100
        minLength: 3
        type: string
    required:
    - email
    - password
    - username
    type: object
  models.TeamDto:
    properties:
      elo:
        example: 1200
        type: integer
      id:
        example: 6
        type: integer
      name:
        example: BIG Clan
        type: string
    type: object
  models.UpdateResultDto:
    properties:
      matchEndDate:
        example: "2025-06-01T00:40:00Z"
        type: string
      matchStartDate:
        example: "2025-06-01T00:00:00Z"
        type: string
      opponentScore:
        example: "14"
        type: string
      score:
        example: "16"
        type: string
    required:
    - matchEndDate
    - matchStartDate
    type: object
  models.UpdateSeasonDto:
    properties:
      endDate:
        example: "2025-08-31T00:00:00Z"
        type: string
      name:
        example: Summer 2025
        maxLength: 100
        minLength: 3
        type: string
      startDate:
        example: "2025-06-01T00:00:00Z"
        type: string
    required:
    - endDate
    - name
    - startDate
    type: object
  models.UpdateTeamDto:
    properties:
      name:
        example: BIG Clan
        maxLength: 100
        minLength: 3
        type: string
    required:
    - name
    type: object
  models.UserDto:
    properties:
      email:
        example: email@gmail.com
        type: string
      id:
        example: 526432ea-822b-4b5b-b1b3-34e8ab453e03
        type: string
      role:
        allOf:
        - $ref: '#/definitions/models.Role'
        example: admin
      username:
        example: AurisTFG
        type: string
    type: object
  responses.AuthLoginResponse:
    properties:
      accessToken:
        type: string
    type: object
  responses.AuthRefreshTokenResponse:
    properties:
      accessToken:
        type: string
    type: object
  responses.AuthSignUpResponse:
    properties:
      user:
        $ref: '#/definitions/models.UserDto'
    type: object
  responses.BadRequestResponse:
    properties:
      error:
        example: JSON parsing error
        type: string
    type: object
  responses.NotFoundResponse:
    properties:
      error:
        example: Resource was not found
        type: string
    type: object
  responses.ResultResponse:
    properties:
      result:
        $ref: '#/definitions/models.ResultDto'
    type: object
  responses.ResultsResponse:
    properties:
      results:
        items:
          $ref: '#/definitions/models.ResultDto'
        type: array
    type: object
  responses.SeasonResponse:
    properties:
      season:
        $ref: '#/definitions/models.SeasonDto'
    type: object
  responses.SeasonsResponse:
    properties:
      seasons:
        items:
          $ref: '#/definitions/models.SeasonDto'
        type: array
    type: object
  responses.TeamResponse:
    properties:
      team:
        $ref: '#/definitions/models.TeamDto'
    type: object
  responses.TeamsResponse:
    properties:
      teams:
        items:
          $ref: '#/definitions/models.TeamDto'
        type: array
    type: object
  responses.UnprocessableEntityResponse:
    properties:
      error:
        example: Validation error
        type: string
    type: object
externalDocs:
  description: OpenAPI
  url: https://swagger.io/resources/open-api/
host: localhost:8080
info:
  contact: {}
  description: This is the API server for the MatchMania application.
  title: MatchMania API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Log in
      parameters:
      - description: Log in details
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.LoginDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.AuthLoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.BadRequestResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/responses.UnprocessableEntityResponse'
      summary: Log in
      tags:
      - auth
  /auth/logout:
    post:
      description: Log out
      responses:
        "204":
          description: No Content
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/responses.UnprocessableEntityResponse'
      summary: Log out
      tags:
      - auth
  /auth/refresh-token:
    post:
      description: Refresh token
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.AuthRefreshTokenResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/responses.UnprocessableEntityResponse'
      summary: Refresh token
      tags:
      - auth
  /auth/signup:
    post:
      consumes:
      - application/json
      description: Sign up
      parameters:
      - description: Sign up details
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.SignUpDto'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/responses.AuthSignUpResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.BadRequestResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/responses.UnprocessableEntityResponse'
      summary: Sign up
      tags:
      - auth
  /seasons:
    get:
      consumes:
      - application/json
      description: Get all seasons
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.SeasonsResponse'
      summary: Get all seasons
      tags:
      - seasons
    post:
      consumes:
      - application/json
      description: Create a season
      parameters:
      - description: Season object that needs to be created
        in: body
        name: season
        required: true
        schema:
          $ref: '#/definitions/models.CreateSeasonDto'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/responses.SeasonResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.BadRequestResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/responses.UnprocessableEntityResponse'
      summary: Create a season
      tags:
      - seasons
  /seasons/{seasonId}:
    delete:
      consumes:
      - application/json
      description: Delete a season
      parameters:
      - description: Season ID
        in: path
        name: seasonId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.NotFoundResponse'
      summary: Delete a season
      tags:
      - seasons
    get:
      consumes:
      - application/json
      description: Get a season
      parameters:
      - description: Season ID
        in: path
        name: seasonId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.SeasonResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.NotFoundResponse'
      summary: Get a season
      tags:
      - seasons
    patch:
      consumes:
      - application/json
      description: Update a season
      parameters:
      - description: Season ID
        in: path
        name: seasonId
        required: true
        type: string
      - description: Season object that needs to be updated
        in: body
        name: season
        required: true
        schema:
          $ref: '#/definitions/models.UpdateSeasonDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.SeasonResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.BadRequestResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.NotFoundResponse'
      summary: Update a season
      tags:
      - seasons
  /seasons/{seasonId}/teams:
    get:
      consumes:
      - application/json
      description: Get all teams
      parameters:
      - description: Season ID
        in: path
        name: seasonId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.TeamsResponse'
      summary: Get all teams
      tags:
      - teams
    post:
      consumes:
      - application/json
      description: Create a team
      parameters:
      - description: Season ID
        in: path
        name: seasonId
        required: true
        type: string
      - description: Team object that needs to be created
        in: body
        name: team
        required: true
        schema:
          $ref: '#/definitions/models.CreateTeamDto'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/responses.TeamResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.BadRequestResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/responses.UnprocessableEntityResponse'
      summary: Create a team
      tags:
      - teams
  /seasons/{seasonId}/teams/{teamId}:
    delete:
      consumes:
      - application/json
      description: Delete a team
      parameters:
      - description: Season ID
        in: path
        name: seasonId
        required: true
        type: string
      - description: Team ID
        in: path
        name: teamId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.NotFoundResponse'
      summary: Delete a team
      tags:
      - teams
    get:
      consumes:
      - application/json
      description: Get a team
      parameters:
      - description: Season ID
        in: path
        name: seasonId
        required: true
        type: string
      - description: Team ID
        in: path
        name: teamId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.TeamResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.NotFoundResponse'
      summary: Get a team
      tags:
      - teams
    patch:
      consumes:
      - application/json
      description: Update a team
      parameters:
      - description: Season ID
        in: path
        name: seasonId
        required: true
        type: string
      - description: Team ID
        in: path
        name: teamId
        required: true
        type: string
      - description: Team object that needs to be updated
        in: body
        name: team
        required: true
        schema:
          $ref: '#/definitions/models.UpdateTeamDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.TeamResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.BadRequestResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.NotFoundResponse'
      summary: Update a team
      tags:
      - teams
  /seasons/{seasonId}/teams/{teamId}/results:
    get:
      consumes:
      - application/json
      description: Get all results
      parameters:
      - description: Season ID
        in: path
        name: seasonId
        required: true
        type: string
      - description: Team ID
        in: path
        name: teamId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.ResultsResponse'
      summary: Get all results
      tags:
      - results
    post:
      consumes:
      - application/json
      description: Create a result
      parameters:
      - description: Season ID
        in: path
        name: seasonId
        required: true
        type: string
      - description: Team ID
        in: path
        name: teamId
        required: true
        type: string
      - description: Result object that needs to be created
        in: body
        name: result
        required: true
        schema:
          $ref: '#/definitions/models.CreateResultDto'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/responses.ResultResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.BadRequestResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/responses.UnprocessableEntityResponse'
      summary: Create a result
      tags:
      - results
  /seasons/{seasonId}/teams/{teamId}/results/{resultId}:
    delete:
      consumes:
      - application/json
      description: Delete a result
      parameters:
      - description: Season ID
        in: path
        name: seasonId
        required: true
        type: string
      - description: Team ID
        in: path
        name: teamId
        required: true
        type: string
      - description: Result ID
        in: path
        name: resultId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.NotFoundResponse'
      summary: Delete a result
      tags:
      - results
    get:
      consumes:
      - application/json
      description: Get a result
      parameters:
      - description: Season ID
        in: path
        name: seasonId
        required: true
        type: string
      - description: Team ID
        in: path
        name: teamId
        required: true
        type: string
      - description: Result ID
        in: path
        name: resultId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.ResultResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.NotFoundResponse'
      summary: Get a result
      tags:
      - results
    patch:
      consumes:
      - application/json
      description: Update a result
      parameters:
      - description: Season ID
        in: path
        name: seasonId
        required: true
        type: string
      - description: Team ID
        in: path
        name: teamId
        required: true
        type: string
      - description: Result ID
        in: path
        name: resultId
        required: true
        type: string
      - description: Result object that needs to be updated
        in: body
        name: result
        required: true
        schema:
          $ref: '#/definitions/models.UpdateResultDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.ResultResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.BadRequestResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.NotFoundResponse'
      summary: Update a result
      tags:
      - results
swagger: "2.0"
